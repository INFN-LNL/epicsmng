#!/bin/bash

base_dbd="base.dbd"
base_libs="\$(EPICS_BASE_IOC_LIBS)"

asyn_dbd="asyn.dbd drvAsynIPPort.dbd drvAsynSerialPort.dbd"
asyn_libs="asyn"

cyusbdevsup_dbd=""
cyusbdevsup_libs=""

motor_dbd="motorSupport.dbd"
motor_libs="motor"

ipac_dbd="ipac.dbd"
ipac_libs="ipac"

streamdevice_dbd="stream.dbd"
streamdevice_libs="stream"

calc_dbd="calc.dbd"
calc_libs="calc"

beckmotor_dbd="beckMotor.dbd"
beckmotor_libs="beckMotor"

modbus_dbd="modbus.dbd"
modbus_libs="modbus"

autosave_dbd="asSupport.dbd"
autosave_libs="autosave"

busy_dbd="busySupport.dbd"
busy_libs="busy"

sscan_dbd="sscanSupport.dbd"
sscan_libs="sscan"



#################################### COPIED
function set_config {
    #file, token, value, beforeof
    if grep -q -e "[# \t]*$2[ \t]*=" $1 ; then
        #the token is present, update it
        sed -i -e "s/[# \t]*$2[ \t]*=.*/$2=$(echo $3 | sed -e 's/\//\\\//g')/" $1
    else if grep -q -e "[# \t]*$4[ \t]*=" $1; then
        # token not found, but found beforeof: insert the token the line before
        linenum="$(grep -n -e "[# \t]*$4[ \t]*=" $1 | cut -d : -f 1 | head -n1)"
        sed -i ""$linenum"i\\$2=$3" $1  #insert the line before $4
    else
        #else: write it at the end of file
        echo "$2=$3" >> $1
    fi
    fi
}

function disable_config {
    #file, token
    sed -i -e "s/\([ \t]*$2[ \t]*=.*\)/# \1/" $1
}

function set_release_par {
    #token, value
    set_config configure/RELEASE $1 $2 "EPICS_BASE"
}

function disable_release_par {
    #token
    disable_config configure/RELEASE $1
}

#################################### COPIED

top="$(pwd)"  #top default path is "."

usage() { 
    echo "USAGE: $0 [-C <path>] configuration"
    echo "     configuration - a config file describing the epics modules to be removed"
    exit 1; 
}

# parse optional argument [-C <top>]
while getopts ":C:" o; do
    case "${o}" in
        C)
            top="$(realpath ${OPTARG})"  #save absolute path in top
            ;;
        *)
            usage
            ;;
    esac
done
shift "$((OPTIND-1))"

# if the supplied path is an empty string, error
if [ -z "$top" ]; then
    usage
fi

cd $top

# the first non-optional parameter must be the config file
if [ "$#" -ne 1 ]; then
    echo "Wrong number of parameters"
    usage
fi

configfile="$1"
confname="$(basename -- "$configfile")"
confname="${confname%.*}"
dir=$top/modules/$confname

#where to install binaries
modulespath="$top/modules"
target="$modulespath/$confname"

#####################################


function set_makefile {
    #echo $0 $1 $2 $3
    #file, token, value
    if grep -q -e "[# \t]*$2[ \t]*+=[ \t]*$3" $1 ; then
        echo " - Using $3"
        #the token is present, update it
        sed -i -e "s/[# \t]*$2[ \t]*+=[ \t]*$3/$2 += $3/" $1
    else if grep -q -e "^[# \t]*$2[ \t]*+=[^()$]*$" $1; then
        echo " - Adding $3"
        # token not found, but found after: insert the token the line after
        linenum="$(grep -n -e "^[# \t]*$2[ \t]*+=[^()$]*$" $1 | cut -d : -f 1 | tail -n1)"
        sed -i ""$linenum"a\\$2 += $3" $1  #insert the line after
    else
        #else: write it at the end of file
        echo "Cannot determine where to write the dbd. Ignoring $3"
    fi
    fi 
}

function configure_apps {
    cd $top
    folders="$(ls -d *App)"
    for d in "$folders"; do
        echo "Configuring $d/src/Makefile"
        set_libs $d/src/Makefile "${d: : -3}" "dbd"    
        set_libs $d/src/Makefile "${d: : -3}" "libs"
    done
}

function set_libs {
    file=$1
    appname=$2"_""$(echo -e "$3" | tr '[:lower:]' '[:upper:]')" # something like myapp_DBD or myapp_LIBS
    type=$3

    #first set new dbds, uncommenting the existing ones or doing nothing if already present
    for m in "${modules[@]}"; do     
        dbds=$m"_"$type  #something like asyn_dbd
        for dbd in ${!dbds}; do
            set_makefile $file $appname $dbd
        done
    done

    #then comment lines containing dbds not in this configuration
    while read -r line ; do
        set="$(echo $line | grep -o -e "\S*[ \t]*\(#.*\)*$")"
        found=false
        for m in "${modules[@]}"; do     
            dbds=$m"_"$type  #something like asyn_dbd
            for _d in ${!dbds}; do
                if [ $set = $_d ]; then
                    found=true
                    break
                fi
            done
        done
        if [ "$found" = false  ]; then
            echo " - Commenting $set"
            sed -i "s/.*$line/#&/" $file
        fi
    done < <(grep -e "^[ \t]*$appname[ \t]*+=.*[ \t]*\(#.*\)*$" $file)
}




#parse config file
tmpfile=$(mktemp)  #create temporary file
grep -o '^[^#]*' "$configfile" > "$tmpfile"  #a copy without comments
declare -a modules #an array to store found modules
declare -a versions #an array to store found versions
while IFS='=' read module version
do
    if [[ $version ]]
    then
        module="$(echo -e "$module" | tr '[:upper:]' '[:lower:]')" #to lowercase
        module="$(echo -e "$module" | tr -d '[:space:]')" #remove spaces
        modules+=( "$module" ) #add to array
        version="$(echo -e "$version" | tr -d '[:space:]')" #to lowercase        
        versions+=( "$version" ) #add to array
        echo "  $module - $version"
    fi
done < "$tmpfile"
rm "$tmpfile"


# comment all definitions in configure/RELEASE

#iterate on arrays and compile corresponding module
for i in "${!modules[@]}"; do     
    echo "---"
    echo "Configuring ioc to use ${modules[$i]}-${versions[$i]}"

    module_up="$(echo -e "${modules[$i]}" | tr '[:lower:]' '[:upper:]')" #to uppercase
    set_release_par "$module_up" "\$(TOP)/modules/${modules[$i]}-${versions[$i]}"
done

configure_apps

#add modules to gitignore, if not already present
if ! grep -q -F "modules/" $top/.gitignore; then
    echo "modules/" >> $top/.gitignore
fi

#problema con stream name