#!/usr/bin/env bash

# EPICSMNG
# A tool to easily download and install epics modules
# Davide Marcato - Damiano Bortolato 2018

# default locations
share="_SHARE_DIR_"
src="$share/src"
configdir="_CONF_DIR_"
settingsdir="$configdir/settings"
patchesdir="$configdir/patches"
version="_VERSION_"

if [ ! -d "$src" ]; then
    if ! install -d "$src"; then
        echo "ERROR: Cannot create source directory $src"
        exit 1
    fi
fi

#source config files
source "$configdir/default.settings"
for file in "$settingsdir"/*; do
  if [[ -f "$file" ]]; then
    source "$file"
  fi
done

##### Common utilities #####

#acquire lock
function lock() {
    local prefix=$1
    local fd='200'
    local lock_file="$share/$prefix.lock"

    # create lock file
    eval "exec $fd>$lock_file"

    # acquier the lock
    flock -n "$fd" && return 0 || return 1
}

eexit() {
    local error_str="$*"

    echo "$error_str"
    exit 1
}

#this creates the folder containing the source of a module
#clones the repository
#and checkout to the required version
function prepare_git_src {
    remote="$1" #coincide with folder name
    module="$2"
    version="$3"
    
    cd "$src" || return 1
    #create folder with same name as module if not already present
    if [ ! -d "$module" ]; then
        echo "Cloning from repo $remote"
        if ! git clone "$remote" "$module"; then
            echo "ERROR: Git clone failed."
            return 1
        fi
        cd "$module" || return 1
    else  #if already present, simply fetch updates
        cd "$module" || return 1
        echo "Updating from repo $remote"
        if ! git fetch --all; then
            echo "WARNING: Git fetch failed."
            #do not return error, may still find required version on local repo
        fi
    fi    
    #discard local changes
    git checkout -- . 
    
    #checkout to the desired version (silencing detached head state)
    if ! git -c advice.detachedHead=false checkout "$version"; then
        echo "ERROR: Git version tag $version not found."
        echo "Example of available versions are:"
        git for-each-ref --sort=-taggerdate --format '%(refname)' refs/tags | cut -d '/' -f 3 | head -n 15
        return 1
    fi

    #apply user-supplied patches for this specific version
    if [ -d "$patchesdir/$module/$version" ] && [ -n "$(ls -A "$patchesdir/$module/$version")" ]; then
        for file in "$patchesdir/$module/$version"/*; do
            if ! git apply --check "$file"; then
                echo "The patch $file is incompatible. Please fix it."
                return 1
            fi
            echo " - Applying patch: $(basename "$file")"
            git apply "$file"
        done
    fi
    cd "$top" || return 1    
    return 0
}

function set_makefile {
    echo " - Setting: $2 += $3"
    #file, token, value
    if grep -q -e "[# \\t]*$2[ \\t]*+=[ \\t]*$3" "$1" ; then
        #echo " - Using $3"
        #the token is present, update it
        sed -i -e "s/[# \\t]*$2[ \\t]*+=[ \\t]*$3/$2 += $3/" "$1"
    elif grep -q -e "^[# \\t]*$2[ \\t]*+=[^()$]*$" "$1"; then
        #echo " - Adding $3"
        # token not found, but found after: insert the token the line after
        linenum="$(grep -n -e "^[# \\t]*$2[ \\t]*+=[^()$]*$" "$1" | cut -d : -f 1 | tail -n1)"
        sed -i "${linenum}a\\$2 += $3" "$1"  #insert the line after
    else
        #else: write it at the end of file
        echo "Cannot determine where to write the dbd. Ignoring $3"
    fi
}

function set_config {
    echo " - Setting: $2 = $3"
    #file, token, value, beforeof
    if grep -q -e "[# \\t]*$2[ \\t]*=" "$1" ; then
        #the token is present, update it
        #echo " - Setting $3"
        sed -i -e "s/[# \\t]*$2[ \\t]*=.*/$2=$(echo "$3" | sed -e 's/\//\\\//g')/" "$1"
    elif grep -q -e "[# \\t]*$4[ \\t]*=" "$1"; then
        # token not found, but found beforeof: insert the token the line before
        #echo " - Adding $3"
        linenum="$(grep -n -e "[# \\t]*$4[ \\t]*=" "$1" | cut -d : -f 1 | head -n1)"
        sed -i "${linenum}i\\$2=$3" "$1"  #insert the line before $4
    else
        #else: write it at the end of file
        #echo " - Adding $3"
        echo "$2=$3" >> "$1"
    fi
}

function disable_config {
    #file, token
    echo " - Commenting: $2"
    sed -i -e "s/\\([ \\t]*$2[ \\t]*=.*\\)/# \\1/" "$1"
}

function set_release_par {
    #token, value
    set_config configure/RELEASE "$1" "$2" "EPICS_BASE"
}

function disable_release_par {
    #token
    disable_config configure/RELEASE "$1"
}

function set_site {
    str="$1"
    dest="$2"
    file="configure/CONFIG_SITE"

    if [ ! -r "$file" ]; then
        file="configure/CONFIG_APP"
    fi

    if [ ! -r "$file" ]; then
        file="configure/CONFIG"
    fi

    #if not present exactly as required -> you are changing version    
    #if ! grep -q -e "^[ \\t]*$str[ \\t]*=[ \\t]*$dest/\?[ \\t]*\(#.*\)*$" $file; then
        set_config "$file" "$str" "$dest"
    #fi
}

#sets configure/release with path of the required modules to compile a module
#it reads the required ones from $module_requires variable
function set_requires {
    mod_to_build=$1

    requires="_requires"
    requires=$mod_to_build$requires  #something like asyn_requires
    for m in ${!requires}; do   #expanded to $asyn_requires
        #echo "$mod_to_build requires $m"
        module_up="$(echo -e "$m" | tr '[:lower:]' '[:upper:]')" #to uppercase
        if [ "$module_up" == 'BASE' ]; then
            module_up='EPICS_BASE'
        fi
        
        #search for the required module inside the modules to be installed  --TODO: change to installed ones
        indx=-1
        for j in "${!modules[@]}"; do
            if [ "${modules[$j]}" = "$m" ]; then
                indx=$j
                break
            fi
        done

        #if not found: error, it is required
        if [ "$indx" = -1 ]; then 
            echo "ERROR: $mod_to_build requires $m"
            return 1
        fi

        #set path inside module release
        set_release_par "$module_up" "$target/$m-${versions[$indx]}"
    done
}

#sets configure/release with path of the optional modules to compile a module
#it reads the optional ones from $module_optionals variable
function set_optionals {
    mod_to_build=$1

    optionals="_optionals"
    optionals=$mod_to_build$optionals  #something like asyn_optionals
    for m in ${!optionals}; do   #expanded to $asyn_optionals
        #echo "$mod_to_build can link to $m"
        module_up="$(echo -e "$m" | tr '[:lower:]' '[:upper:]')" #to uppercase
        if [ "$module_up" == 'BASE' ]; then
            module_up='EPICS_BASE'
        fi

        #search for the required module inside the modules to be installed  --TODO: change to installed ones
        indx=-1
        for j in "${!modules[@]}"; do
            if [ "${modules[$j]}" = "$m" ]; then
                indx=$j
                break
            fi
        done

        #if not found, comment it in configure/RELEASE, else uncomment and set path
        if [ "$indx" = -1 ]; then 
            disable_release_par "$module_up"
        else
            set_release_par "$module_up" "$target/$m-${versions[$indx]}"
        fi
    done
}

function compile_git {
    module="$1"
    version="$2"   
    dest="$target/$module-$version"

    url="_url"
    url="$module$url"
    if [ -z "${!url+x}" ]; then
        echo "Download url of $module not set. Please add it to $settingsdir/user.settings"
        return 1
    fi
    if ! prepare_git_src "${!url}" "$module" "$version"; then
        return 1
    fi
    
    cd "$src"/"$module" || return 1
    set_site 'INSTALL_LOCATION' "$dest"
    if [ "$tirpc" -eq "1" ] && [ "$module" = "asyn" ]; then
        set_site 'TIRPC' 'YES'
    fi

    truncate -s 0 configure/RELEASE

    #set file configure release with target, the required modules and the optional ones
    set_release_par "SUPPORT" "$target"
    if ! set_requires "$module"; then
        echo "Unable to satisfy all requirements"
        return 1
    fi
    set_optionals "$module"

    echo "Building..."
    make clean > "$verbose" 2>&1
    make > "$verbose" 2>&1
}

function compile_file {
    module="$1"
    version="$2"
    fname="$3"
    dest="$target/$module-$version"

    mkdir -p "$src/$module"
    cd "$src/$module" || return 1
    if [ -d "$version" ]; then
        echo "folder exists"
        cd "$version" || return 1
    elif [ -f "$fname" ]; then
        echo "file exists"
        mkdir "$version"
        tar -xf "$fname" --strip-components=1 -C "$version"
        cd "$version" || return 1
    else
        echo "Downloading..."
        url="_url"
        url="$module$url"
        if [ -z "${!url+x}" ]; then
            echo "Download url of $module not set. Please add it to $settingsdir/user.settings"
            return 1
        fi
        url=${!url}
        if ! wget "$url/$fname"; then
            echo "Failed to download: $url/$fname"
            return 1
        fi
        mkdir "$version"
        tar zxvf "$fname" --strip-components=1 -C "$version"
        cd "$version" || return 1
    fi
    
    set_site 'INSTALL_LOCATION' "$dest"
    disable_config configure/CONFIG 'CROSS_COMP.*'

    #set file configure release with target, the required modules and the optional ones
    set_release_par "SUPPORT" "$target"
    if ! set_requires "$module"; then
        echo "Unable to satisfy all requirements"
        return 1
    fi
    set_optionals "$module"

    echo "Building..."
    make clean > "$verbose" 2>&1
    make > "$verbose" 2>&1
};



##### Module Specific Compile Functions #####

function compile_base {
    version=$1
    dest="$target/base-$version"
    if ! compile_git "base" "$version"; then
        return 1
    fi

    cp -r startup "$dest/"
    if [ -d config ]; then
        cp -r config "$dest/"
    fi

    EPICS_HOST_ARCH="$("$dest"/startup/EpicsHostArch)"
    export EPICS_HOST_ARCH
    export base="$dest"
};

function compile_gensub {
    module="gensub"
    version="$1"
    fname="genSubV$version.tar.gz"
    
    compile_file "$module" "$version" "$fname"
};

function compile_sncseq {
    module="sncseq"
    version="$1"
    fname="seq-$version.tar.gz"
    
    compile_file "$module" "$version" "$fname"
};

function compile_csm {
    local module version fname
    module="csm"
    version="$1"
    fname="$module-$version.tar.gz"
    
    compile_file "$module" "$version" "$fname"
};

function compile_s7nodave {
    local module version fname
    module="s7nodave"
    version="$1"
    fname="$module-$version.tar.gz"
    
    compile_file "$module" "$version" "$fname"
};

function compile_stream {
    return "$(compile_git "streamdevice" "$@")"
}

##### Makemodules #####

function makemodules {  
    
    #create modules folder if not present
    if [ ! -d "$modulespath" ]; then
        if ! mkdir "$modulespath"; then
            echo "Cannot create modules folder $modulespath"
            exit 1
        fi
    fi

    #create configuration folder if not present
    if [ ! -d "$target" ]; then
        if ! mkdir "$target"; then
            echo "Cannot create configuration folder $target"
            exit 1
        fi
    fi

    #iterate on arrays and compile corresponding module
    for i in "${!modules[@]}"; do     
        echo "---"
        echo "Compiling ${modules[$i]}-${versions[$i]}"

        #otherversions="$(find $target -name "${modules[$i]}-*" | grep -v "${versions[$i]}")"
        #rm -rf $otherversions
        
        # if a special function is declared to compile this module, use it
        if [ "$(type -t compile_"${modules[i]}")" = "function" ]; then
            if ! compile_"${modules[i]}" "${versions[$i]}"; then
                echo "ERROR while compiling ${modules[$i]}-${versions[$i]}"
                echo "For more informations on compile errors try running with -v flag."
                exit 1
            fi
        else #else use the standard function to compile modules from git
            if ! compile_git "${modules[i]}" "${versions[$i]}"; then
                echo "ERROR while compiling ${modules[$i]}-${versions[$i]}."
                echo "For more informations on compile errors try running with -v flag."
                exit 1
            fi
        fi
    done
    echo ""
    
    #remove unused compiled modules if requested
    if [ "$removeubin" -eq "1" ]; then
        for dir in "$target"/*/ ; do
            found=false
            for i in "${!modules[@]}"; do  
                if [ "${modules[$i]}-${versions[$i]}" = "$(basename "$dir")" ]; then
                    found=true
                    break
                fi
            done
            if [ "$found" = false  ]; then
                echo "Removing unused module $dir"
                rm -rf "$dir"
            fi
        done
    fi
}
##### Cleanmodules #####

function cleanmodules {

    # if I cannot read it (file not present or unreadable) error
    if [ ! -d "$target" ]; then
        echo "Cannot find installed configuration $confname"
        exit 1
    else
        echo "Removing $target"
        rm -rf "$target"
    fi
}

##### Configureioc #####

function configure_apps {
    cd "$top" || return 1
    folders="$(ls -d ./*App)"
    for d in $folders; do
        d="$(basename "$d")"
        echo ""
        echo "Configuring $top/$d/src/Makefile"
        set_dbd_libs "$d/src/Makefile" "${d: : -3}" "dbd"    
        set_dbd_libs "$d/src/Makefile" "${d: : -3}" "libs"
    done
}

function set_dbd_libs {
    file=$1
    appname=$2"_""$(echo -e "$3" | tr '[:lower:]' '[:upper:]')" # something like myapp_DBD or myapp_LIBS
    type=$3

    #first set new dbds, uncommenting the existing ones or doing nothing if already present
    for m in "${modules[@]}"; do     
        dbds=$m"_"$type  #something like asyn_dbd
        for dbd in ${!dbds}; do
            set_makefile "$file" "$appname" "$dbd"
        done
    done

    #then comment lines containing dbds not in this configuration
    while read -r line ; do
        set="$(echo "$line" | grep -o -e "\\S*[ \\t]*\\(#.*\\)*$")"
        found=false
        for m in "${modules[@]}"; do     
            dbds=$m"_"$type  #something like asyn_dbd
            for _d in ${!dbds}; do
                if [ "$set" = "$_d" ]; then
                    found=true
                    break
                fi
            done
        done

        # If defined locally, then do not comment
        if [[ -n "$(find "$top/$d" -name "$set")" ]]; then
            found=true
        fi

        if [ "$found" = false  ]; then
            echo " - Commenting: $set"
            sed -i "s/.*$line/#&/" "$file"
        fi
    done < <(grep -e "^[ \\t]*${appname}[ \\t]*+=.*[ \\t]*\\(#.*\\)*$" "$file")
}

function configureioc {
    #iterate on arrays and compile corresponding module
    echo ""
    echo "Configuring $top/configure/RELEASE"
    for j in "${!modules[@]}"; do     
        #echo "Configuring ioc to use ${modules[$j]}-${versions[$j]}"
        module_up="$(echo -e "${modules[$j]}" | tr '[:lower:]' '[:upper:]')" #to uppercase
        set_release_par "$module_up" "\$(TOP)/modules/$confname/${modules[$j]}-${versions[$j]}"
    done

    configure_apps

    #if gitignore not present, but top is a git repo -> create gitignore
    if [ ! -r "$top/.gitignore" ] && [ -d "$top/.git" ]; then
        touch "$top/.gitignore"
    fi

    #if gitignore is present but modules/ is not listed, add it
    if [ -r "$top/.gitignore" ]; then
        if ! grep -q -F "modules/" "$top/.gitignore"; then
            echo "modules/" >> "$top/.gitignore"
        fi
    fi
}

##### LISTMODULES #####

function listmodules {
    local tobelisted output tags count total width full empty fn fn_mod en
    output[0]="------~|~------------\n"
    output[1]="MODULE~|~TAG EXAMPLES\n"
    output[2]="------~|~------------\n"
    mapfile -t tobelisted <<< "$(set -o posix; set | grep "_url")"
    
    count=0 # num of modules already inspected
    width="$(tput cols)" # shell width
    total="${#tobelisted[@]}" # total num of modules
    fn="$(( ((width - 27) * count) / total ))"; # num of occupied blocks in bar
    fn_mod="$(( (((width - 27) * count) % total)!=0 ))" # 1 if there is module
    en="$(( ((width - 27) * (total-count)) / total + fn_mod ))" # num of free blocks in bar
    full="$(printf "%${fn}s" | tr " " "=")" # string for full blocks
    empty="$(printf "%${en}s")" # string for free blocks
    
    # For each module - first print only name
    for ((i=0;i<total;i++)); do
        url=$(echo "${tobelisted[$i]}" | grep -o -e "[^=]*$")
        listing="$(echo "${tobelisted[$i]}" | grep -o -e "^[^_]*")"
        output[$((i+3))]="$listing~|~\n"
    done
    # Print all modules names
    echo -e "$(printf '%s' "${output[@]}")" | column -t -s "~"
    # Print a status bar
    printf "Downloading tags: %3d.%1d%% [%s%s]\n" $(( count * 100 / total )) $(( (count * 1000 / total) % 10 )) "$full" "$empty"

    # For each module - now print also tags one by one
    for ((i=0;i<total;i++)); do
        url=$(echo "${tobelisted[$i]}" | grep -o -e "[^=]*$")
        listing="$(echo "${tobelisted[$i]}" | grep -o -e "^[^_]*")"
        tags="$(git ls-remote -t "$url" 2>/dev/null | awk '{print $2}' | cut -d '/' -f 3 \
            | cut -d '^' -f 1 | uniq | grep -oe "^\([A-Za-z]\)\?\([\.-]\)\?\([0-9]\)\+\([\.-]\)\+.*" \
            | sort -r --version-sort | head -n 5 | awk -vORS=" " '{ print $1 }' | awk '$1=$1' FS=" " OFS="~")"
        if [ ! "$tags" ]; then
            tags="-"
        fi
        output[$((i+3))]="$listing~|~$tags\n"
        
        # Reprint all output (with added tags)
        tput cuu $(( total + 4 )) # go up in terminal
        echo -e "$(printf '%s' "${output[@]}")" | column -t -s "~"
        
        # Updated status bar
        count=$(( count +1 ))
        width="$(tput cols)" # shell width
        fn="$(( ((width - 27) * count) / total ))"; # num of occupied blocks in bar
        fn_mod="$(( (((width - 27) * count) % total)!=0 ))" # 1 if there is module
        en="$(( ((width - 27) * (total-count)) / total + fn_mod ))" # num of free blocks in bar
        full="$(printf "%${fn}s" | tr " " "=")" # string for full blocks
        empty="$(printf "%${en}s")" # string for free blocks
        printf "Downloading tags: %3d.%1d%% [%s%s]\n" $(( count * 100 / total )) $(( (count * 1000 / total) % 10 )) "$full" "$empty"
    done
}

##### EPICSMNG #####

top="$(pwd)"  #top default path is "."
verbose="/dev/null"  #verbosity: default=non verbose
removeubin=0	      #removed unused modules: default false
tirpc=0	      #use tirpc: default false
programname="$(basename "$0")"

usage() { 
    echo "$programname $version"
    echo ""
    echo "USAGE: $programname command args"
    echo "     command - one of the supported commands"
    echo "     args    - the command arguments"
    echo ""
    echo "Supported commands:"
    echo " - makemodules [-C <path>] [-j <n>] [-v] configuration"
    echo " - cleanmodules [-C <path>] configuration"
    echo " - configureioc [-C <path>] configuration"
    echo " - listmodules"
    echo " - version"
    echo ""
    echo "Arguments:"
    echo " - configuration - a file describing the epics modules to be installed"
    echo " - -C <path>     - where to install modules"
    echo " - -j <n>        - parallel jobs on make"
    echo " - -v            - enable verbose mode"
    echo " - -r            - removed unused binary from install folder"
    echo " - -t            - use tirpc"
    echo ""
    exit 1; 
}

# the first non-optional parameter must be the command
if (( $# < 1 )); then
    usage
fi
command=$1
shift 1  #shift so that now optional args are first (required by optargs)

if [ "$command" == "version" ]; then
    echo "$version"
    exit 0
fi

# parse optional argument [-C <top>]
while getopts ":C:j:vrt" o; do
    case "${o}" in
        C)
            top="$(realpath "${OPTARG}")"  #save absolute path in top
            ;;
        j)  export MAKEOPTS="-j$OPTARG"
            export MAKEFLAGS="-j$OPTARG"
            ;;
        v)  verbose="/dev/stdout" #more verbose
            ;;
        r)  removeubin=1 #remove unused binary from target folder
            ;;
        t)  tirpc=1 #use tirpc
            ;;
        *)
            echo "Wrong optional argument"
            usage
            ;;
    esac
done
shift "$((OPTIND-1))"

# if the supplied path is an empty string, error
if [ -z "$top" ]; then
    usage
fi

if [ "$command" != "listmodules" ]; then
    # There must be the configuration file
    if [ $# -ne 1 ]; then
        usage
    fi
    configfile="$1" #was the $2 but shifted

    # if I cannot read it (file not present or unreadable) error
    if [ ! -r "$configfile" ]; then
        echo "Cannot read file $configfile"
        exit 1
    fi

    #echo configuration name
    confname="$(basename -- "$configfile")"
    confname="${confname%.*}"
    echo "Configuration: -> $confname <-"

    #where to install binaries
    modulespath="$top/modules"
    target="$modulespath/$confname"

    #parse config file
    declare -a modules #an array to store found modules
    declare -a versions #an array to store found versions
    while IFS='=' read -r module version
    do
        if [[ $version ]]
        then
            module="$(echo -e "$module" | tr '[:upper:]' '[:lower:]')" #to lowercase
            module="$(echo -e "$module" | tr -d '[:space:]')" #remove spaces
            modules+=( "$module" ) #add to array
            version="$(echo -e "$version" | tr -d '[:space:]')" #to lowercase        
            versions+=( "$version" ) #add to array
            echo "  $module - $version"
        fi
    done < <(grep -o '^[^#]*' "$configfile") #a copy without comments

    if [ "${modules[0]}" != "base" ]; then
        echo "ERROR: base must be the first module in the configuration"
        exit 0
    fi
fi


#main command launcher
case "$command" in
makemodules)
	lock "$programname" || eexit "ERROR: Only one instance of $programname makemodules can run at one time."
    makemodules 
	;;
cleanmodules)
    cleanmodules
    ;;
configureioc)
    configureioc
    ;;
listmodules)
    listmodules
    ;;
*)
	echo "Unknown command '$command'"
	usage
	exit 1
	;;
esac
echo "--- Completed ---"
